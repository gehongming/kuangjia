{"name": "测试登录正常", "status": "broken", "statusDetails": {"message": "TypeError: exceptions must derive from BaseException", "trace": "self = <Testcases.test_2buy.TestLogin object at 0x0000000004DD4CF8>\nopen_url1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3a93a0ceb15f70baa3c8050b676fa251\")>\n\n    @allure.story('登录')\n    @allure.title('测试登录正常')\n    @allure.description('这是验证码登录的成功用例')\n    @allure.link('www.baidu.com')\n    @pytest.mark.demo\n    def test_login(self,open_url1):\n        try:\n>           lp(open_url1).login_code(bd.login_data[\"user\"],bd.login_data[\"passwd\"])\n\ntest_2buy.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\na = (<PageObjects.pc.login_page.LoginPage object at 0x0000000004DFAE10>, '17625188013', 'sD2q')\nkw = {}, __tracebackhide__ = True\nparams = OrderedDict([('user', \"'17625188013'\"), ('passwd', \"'sD2q'\")])\nargs = ['<PageObjects.pc.login_page.LoginPage object at 0x0000000004DFAE10>', \"'17625188013'\", \"'sD2q'\"]\n\n    @wraps(func)\n    def impl(*a, **kw):\n        __tracebackhide__ = True\n        params = func_parameters(func, *a, **kw)\n        args = list(map(lambda x: represent(x), a))\n        with StepContext(self.title.format(*args, **params), params):\n>           return func(*a, **kw)\n\nE:\\Python3\\lib\\site-packages\\allure_commons\\_allure.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PageObjects.pc.login_page.LoginPage object at 0x0000000004DFAE10>\nuser = '17625188013', passwd = 'sD2q'\n\n    @allure.step('验证码登录')\n    def login_code(self,user,passwd):\n        #输入账号密码\n>       self.input_text(loc.uesr_loc,'输入手机号',user)\n\n..\\PageObjects\\pc\\login_page.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PageObjects.pc.login_page.LoginPage object at 0x0000000004DFAE10>\nloc = ('xpath', '//input[@name=\"p1hone\"]'), img_doc = '输入手机号'\nargs = ('17625188013',)\n\n    def input_text(self,loc,img_doc,*args):\n        # 1、等待元素可见\n>       self.wait_eleVisible(loc,img_doc)\n\n..\\common\\basepage.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PageObjects.pc.login_page.LoginPage object at 0x0000000004DFAE10>\nloc = ('xpath', '//input[@name=\"p1hone\"]'), img_doc = '输入手机号', timeout = 30\nfrequency = 0.5\n\n    def wait_eleVisible(self,loc,img_doc=\"\",timeout=30,frequency=0.5):\n        logger.info(\"等待元素 {} 可见。\".format(loc))\n        try:\n            # 起始等待的时间 datetime\n            start = datetime.datetime.now()\n>           WebDriverWait(self.driver,timeout,frequency).until(EC.visibility_of_element_located(loc))\n\n..\\common\\basepage.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3a93a0ceb15f70baa3c8050b676fa251\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x0000000004E12588>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nE:\\Python3\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Testcases.test_2buy.TestLogin object at 0x0000000004DD4CF8>\nopen_url1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3a93a0ceb15f70baa3c8050b676fa251\")>\n\n    @allure.story('登录')\n    @allure.title('测试登录正常')\n    @allure.description('这是验证码登录的成功用例')\n    @allure.link('www.baidu.com')\n    @pytest.mark.demo\n    def test_login(self,open_url1):\n        try:\n            lp(open_url1).login_code(bd.login_data[\"user\"],bd.login_data[\"passwd\"])\n            time.sleep(5)\n            assert True == ip(open_url1).login_check()\n        except:\n    \n                with open(Filelist[-1], \"rb\") as f:\n                    context = f.read()\n                    allure.attach(context, \"错误图片\", attachment_type=allure.attachment_type.PNG)\n>               raise f\nE               TypeError: exceptions must derive from BaseException\n\ntest_2buy.py:39: TypeError"}, "description": "这是验证码登录的成功用例", "steps": [{"name": "验证码登录", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"E:\\Python3\\lib\\site-packages\\allure_commons\\_allure.py\", line 141, in impl\n    return func(*a, **kw)\n  File \"D:\\B2B\\PageObjects\\pc\\login_page.py\", line 15, in login_code\n    self.input_text(loc.uesr_loc,'输入手机号',user)\n  File \"D:\\B2B\\common\\basepage.py\", line 118, in input_text\n    self.wait_eleVisible(loc,img_doc)\n  File \"D:\\B2B\\common\\basepage.py\", line 28, in wait_eleVisible\n    WebDriverWait(self.driver,timeout,frequency).until(EC.visibility_of_element_located(loc))\n  File \"E:\\Python3\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 80, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "parameters": [{"name": "user", "value": "'17625188013'"}, {"name": "passwd", "value": "'sD2q'"}], "start": 1574232966602, "stop": 1574232997820}], "attachments": [{"name": "错误图片", "source": "8f2e0ac4-d627-45ab-9ec5-95a152079521-attachment.png", "type": "image/png"}, {"name": "log", "source": "037d01c4-a00e-4c15-82d4-240df3c788c5-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "71e268e5-a62d-4fc8-be09-43e07578eb2b-attachment.txt", "type": "text/plain"}], "start": 1574232966602, "stop": 1574232997825, "uuid": "83aa89f7-dae1-47e2-909c-1465c93a1a04", "historyId": "a404df02f600ced5f37d055b093f39d6", "fullName": "Testcases.test_2buy.TestLogin#test_login", "labels": [{"name": "story", "value": "登录"}, {"name": "feature", "value": "每日用例-加购"}, {"name": "tag", "value": "demo"}, {"name": "parentSuite", "value": "Testcases"}, {"name": "suite", "value": "test_2buy"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "JS-CS-002"}, {"name": "thread", "value": "40724-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcases.test_2buy"}], "links": [{"type": "link", "url": "www.baidu.com", "name": "www.baidu.com"}]}