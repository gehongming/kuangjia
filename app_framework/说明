WEB - APP

# app界面小，内容少，逻辑也简单，功能也没有web网页齐全。

# 封装页面 ==


# 开启会话

web: webdriver.Chrome()

app:准备一堆启动参数，desired_caps// 然后，Remote与appium连接。
# 平台名称、平台版本号、自动化引擎、设备名称、包名、入口页面名、不重置、键盘

# 首页功能：每一个用例，只需要启动APP即可。

# 登陆功能：每一个用例，都应该是未登陆状态。无论何时执行。
# 前置 后置：noReset = False
# 最后一个用例：登陆成功。

# 题库功能：每一个用例，在登陆状态下才可以。
# 前置后置：noReset=True的情况下，判断用户是否登陆成功！！
# 如果没有登陆成功，则重新登陆一次。


# yaml - 读取为字典。



# 定义一个专门用来处理启动参数的函数。然后在每个用例的前置当中，
根据参数不同，来定制化启动参数和会话。


# 可优化的地方：
自动的识别到连接的设备量，并能够自动的获取设备的启动参数信息。
自动化获取 指定应用的包名和入口名称

appium server是可以启动多个，也可以通过命令行启动的。ip+端口  默认端口：4723

# 多设备并发 -
# 1、selenium grid  - appium通用。
# 2、多线程 - pytest一起用。 xdist并   pytest的命令行参数化
# 3、jenkins多任务制  - 父job下面，挂多个子job，每个job对应一个设备。
