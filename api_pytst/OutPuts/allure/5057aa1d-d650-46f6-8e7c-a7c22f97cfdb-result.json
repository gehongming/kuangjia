{"name": "test_register[data1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0 == 1\n  -0\n  +1", "trace": "self = <api_pytst.testcases.test_2register.TestRegisterCase object at 0x000002096AF84160>\nopen_url = (<api_pytst.common.webservice_request.WebService object at 0x000002096AE35860>, <api_pytst.common.do_mysql.DoMysql object at 0x000002096AE358D0>, <api_pytst.common.context.Context object at 0x000002096AE43940>)\ndata = {'case_id': 2, 'check_sql': '{\\'sql1\\':\\'SELECT Fuser_id FROM user_db.t_user_info\\',\\'sql2\\':\\'SELECT * FROM user_db.t...user_id\":\"徐雷\",\"channel_id\":\"1\",\"pwd\":\"123456\",\"ip\": \"201.113.153.186\", \"mobile\":\"18539456321\"}', 'expected': 'ok', ...}\n\n    @pytest.mark.parametrize(\"data\", cases)\n    @pytest.mark.smoke\n    def test_register(self,open_url,data):\n        # data[\"url\"], data[\"data\"], data[\"method\"], data[\"expected\"], data[\"case_id\"], data[\"title\"], data[\"result\"], data[\"check_sql\"]\n        data[\"data\"] = Context().re_replace(data[\"data\"]) #正则替换 千万不能少\n        logger.info('开始测试第{}条：{}'.format(data[\"case_id\"], data[\"title\"]))\n        if data[\"case_id\"]==1:\n            new_phone= create_data.create_phone()\n            logger.info('手机号是：{}'.format(new_phone))\n            data[\"data\"] = context.replace(data[\"data\"],'register_phone', str(new_phone))\n            setattr(Context, \"register_phone\", str(new_phone))\n    \n        new_ip = create_data.create_ip()\n        logger.info('IP是:{}'.format(new_ip))\n        data[\"data\"]=context.replace(data[\"data\"],'random_ip', str(new_ip))\n        if data[\"data\"].find('user_name')>-1: #找到username\n            if data[\"check_sql\"]:\n                sql=eval(data[\"check_sql\"])['sql1']\n    \n                user_name=create_data.create_name()\n                logger.info('uesename是{}'.format(user_name))\n                all_user=open_url[1].fetch_all(sql)\n                while True:\n                    if (user_name,) in all_user:\n                        user_name =create_data.create_name()\n                        continue #防止名字与数据库数据重复\n                    else:\n                        break\n                data[\"data\"]=context.replace(data[\"data\"],'user_name',str(user_name))\n            logger.info('请求数据是:{}'.format(data[\"data\"]))\n        #验证码超时\n        if data[\"data\"].find('chaoshi') >-1:\n            sql = eval(data[\"check_sql\"])['sql1']\n            chaoshi_code = open_url[1].fetch_one_dict(sql)['Fverify_code']\n            chaoshi_phone = open_url[1].fetch_one_dict(sql)['Fmobile_no']\n            data[\"data\"] = data[\"data\"].replace('chaoshi_code', str(chaoshi_code))\n            data[\"data\"] = data[\"data\"].replace('chaoshi_phone', str(chaoshi_phone))\n            logger.info('请求数据是:{}'.format(data))\n    \n    \n        logger.info('请求是:{}'.format(data))\n        resp=open_url[0].webservice(data[\"url\"],data[\"data\"],data[\"method\"])# 实际值\n        logger.info('实际值:{}'.format(resp))\n    \n        try:\n            if data[\"title\"] =='成功发送短信验证码':\n                sql=eval(data[\"check_sql\"])['sql1']\n    \n                logger.info('执行sql语句:{}'.format(sql))\n                verify_code = open_url[1].fetch_one_dict(sql)['Fverify_code']\n                logger.info('验证码:{}'.format(verify_code))\n                setattr(context.Context, \"verify_code\", str(verify_code))\n    \n    \n            if data[\"title\"]=='注册成功':\n                sql=eval(data[\"check_sql\"])['sql2']\n                sql=context.replace(sql,\"username\",str(user_name))\n                logger.info('执行的sql{}'.format(sql))\n    \n                sql_res=open_url[1].fetch_all(sql)\n                len_res=len(sql_res)\n                logger.info('sql执行结果:{}'.format(sql_res))\n                assert len_res == 1\n    \n            assert data[\"expected\"] ==resp\n            result = 'Pass'\n        except AssertionError as e:\n            result = 'False'\n            logger.error(\"报错了，{0}\".format(e))\n>           raise e\n\ntest_2register.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <api_pytst.testcases.test_2register.TestRegisterCase object at 0x000002096AF84160>\nopen_url = (<api_pytst.common.webservice_request.WebService object at 0x000002096AE35860>, <api_pytst.common.do_mysql.DoMysql object at 0x000002096AE358D0>, <api_pytst.common.context.Context object at 0x000002096AE43940>)\ndata = {'case_id': 2, 'check_sql': '{\\'sql1\\':\\'SELECT Fuser_id FROM user_db.t_user_info\\',\\'sql2\\':\\'SELECT * FROM user_db.t...user_id\":\"徐雷\",\"channel_id\":\"1\",\"pwd\":\"123456\",\"ip\": \"201.113.153.186\", \"mobile\":\"18539456321\"}', 'expected': 'ok', ...}\n\n    @pytest.mark.parametrize(\"data\", cases)\n    @pytest.mark.smoke\n    def test_register(self,open_url,data):\n        # data[\"url\"], data[\"data\"], data[\"method\"], data[\"expected\"], data[\"case_id\"], data[\"title\"], data[\"result\"], data[\"check_sql\"]\n        data[\"data\"] = Context().re_replace(data[\"data\"]) #正则替换 千万不能少\n        logger.info('开始测试第{}条：{}'.format(data[\"case_id\"], data[\"title\"]))\n        if data[\"case_id\"]==1:\n            new_phone= create_data.create_phone()\n            logger.info('手机号是：{}'.format(new_phone))\n            data[\"data\"] = context.replace(data[\"data\"],'register_phone', str(new_phone))\n            setattr(Context, \"register_phone\", str(new_phone))\n    \n        new_ip = create_data.create_ip()\n        logger.info('IP是:{}'.format(new_ip))\n        data[\"data\"]=context.replace(data[\"data\"],'random_ip', str(new_ip))\n        if data[\"data\"].find('user_name')>-1: #找到username\n            if data[\"check_sql\"]:\n                sql=eval(data[\"check_sql\"])['sql1']\n    \n                user_name=create_data.create_name()\n                logger.info('uesename是{}'.format(user_name))\n                all_user=open_url[1].fetch_all(sql)\n                while True:\n                    if (user_name,) in all_user:\n                        user_name =create_data.create_name()\n                        continue #防止名字与数据库数据重复\n                    else:\n                        break\n                data[\"data\"]=context.replace(data[\"data\"],'user_name',str(user_name))\n            logger.info('请求数据是:{}'.format(data[\"data\"]))\n        #验证码超时\n        if data[\"data\"].find('chaoshi') >-1:\n            sql = eval(data[\"check_sql\"])['sql1']\n            chaoshi_code = open_url[1].fetch_one_dict(sql)['Fverify_code']\n            chaoshi_phone = open_url[1].fetch_one_dict(sql)['Fmobile_no']\n            data[\"data\"] = data[\"data\"].replace('chaoshi_code', str(chaoshi_code))\n            data[\"data\"] = data[\"data\"].replace('chaoshi_phone', str(chaoshi_phone))\n            logger.info('请求数据是:{}'.format(data))\n    \n    \n        logger.info('请求是:{}'.format(data))\n        resp=open_url[0].webservice(data[\"url\"],data[\"data\"],data[\"method\"])# 实际值\n        logger.info('实际值:{}'.format(resp))\n    \n        try:\n            if data[\"title\"] =='成功发送短信验证码':\n                sql=eval(data[\"check_sql\"])['sql1']\n    \n                logger.info('执行sql语句:{}'.format(sql))\n                verify_code = open_url[1].fetch_one_dict(sql)['Fverify_code']\n                logger.info('验证码:{}'.format(verify_code))\n                setattr(context.Context, \"verify_code\", str(verify_code))\n    \n    \n            if data[\"title\"]=='注册成功':\n                sql=eval(data[\"check_sql\"])['sql2']\n                sql=context.replace(sql,\"username\",str(user_name))\n                logger.info('执行的sql{}'.format(sql))\n    \n                sql_res=open_url[1].fetch_all(sql)\n                len_res=len(sql_res)\n                logger.info('sql执行结果:{}'.format(sql_res))\n>               assert len_res == 1\nE               assert 0 == 1\nE                 -0\nE                 +1\n\ntest_2register.py:82: AssertionError"}, "attachments": [{"name": "log", "source": "7e37823a-0feb-4344-bba4-e8740601a866-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'case_id': 2, 'title': '注册成功', 'url': 'finance-user_info-war-1.0/ws/financeUserInfoFacade.ws?wsdl', 'data': '{\"verify_code\":\\'#verify_code#\\',\"user_id\":\"user_name\",\"channel_id\":\"1\",\"pwd\":\"123456\",\"ip\": \"random_ip\", \"mobile\":\"#register_phone#\"}', 'method': 'userRegister', 'expected': 'ok', 'result': 'Pass', 'check_sql': '{\\'sql1\\':\\'SELECT Fuser_id FROM user_db.t_user_info\\',\\'sql2\\':\\'SELECT * FROM user_db.t_user_info WHERE Fuser_id=\"user_name\"\\'}'}"}], "start": 1563206084648, "stop": 1563206085577, "uuid": "ae9faca9-b737-4e84-a95b-89e305c9a8b9", "historyId": "e457643b4e498b004ab8551cfe465a53", "fullName": "testcases.test_2register.TestRegisterCase#test_register[data1]", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_2register"}, {"name": "subSuite", "value": "TestRegisterCase"}, {"name": "host", "value": "DESKTOP-BI9MG9T"}, {"name": "thread", "value": "11568-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_2register"}]}